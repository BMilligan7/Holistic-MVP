[
  {
    "title": "Epic: Project Foundation & Core Setup",
    "body": "Goal: Establish the essential technical infrastructure and base components for the Holistic MVP.",
    "labels": ["epic", "project-foundation"]
  },
  {
    "title": "US001: Initialize project repository with standard configurations",
    "body": "Part of Epic: Project Foundation & Core Setup\n\nAs a developer, I want the project repository initialized with standard configurations (.gitignore, basic structure), so that code management is organized from the start.",
    "labels": ["user-story", "sprint-0", "setup", "project-foundation"]
  },
  {
    "title": "Task001: Select and validate core technology stack",
    "body": "Part of Epic: Project Foundation & Core Setup\n\nSelect and validate core technology stack (Frontend framework, Backend framework/language, Database) based on requirements and budget.",
    "labels": ["task", "sprint-0", "research", "architecture", "project-foundation"]
  },
  {
    "title": "Task002: Research, select, and validate AI provider(s)",
    "body": "Part of Epic: Project Foundation & Core Setup\n\nResearch, select, and perform initial validation testing with candidate AI providers (Anthropic Claude, OpenAI GPT, others), focusing on cost vs. capability for plan generation and chat within budget.",
    "labels": ["task", "sprint-0", "research", "ai", "budget", "project-foundation"]
  },
  {
    "title": "Task003: Implement initial DB schema (User, UserProfile)",
    "body": "Part of Epic: Project Foundation & Core Setup\n\nImplement the initial database schema for `User` and `UserProfile` tables based on the data model.",
    "labels": ["task", "sprint-0", "database", "backend", "project-foundation"]
  },
  {
    "title": "US002: Implement user registration",
    "body": "Part of Epic: Project Foundation & Core Setup\n\nAs a new user, I want to be able to register for an account using my email and password, so that I can access the application securely.",
    "labels": ["user-story", "sprint-0", "authentication", "backend", "frontend", "project-foundation"]
  },
  {
    "title": "US003: Implement user login",
    "body": "Part of Epic: Project Foundation & Core Setup\n\nAs a registered user, I want to be able to log in using my email and password, so that I can access my personalized information.",
    "labels": ["user-story", "sprint-0", "authentication", "backend", "frontend", "project-foundation"]
  },
  {
    "title": "Task004: Implement secure password hashing",
    "body": "Part of Epic: Project Foundation & Core Setup\n\nImplement secure password hashing and storage for user authentication.",
    "labels": ["task", "sprint-0", "security", "authentication", "backend", "project-foundation"]
  },
  {
    "title": "US004: Create basic application shell/layout",
    "body": "Part of Epic: Project Foundation & Core Setup\n\nAs a user, I want to see a consistent basic application layout (e.g., header, navigation placeholder), so that the application feels familiar as features are added.",
    "labels": ["user-story", "sprint-0", "ui", "frontend", "project-foundation"]
  },
  {
    "title": "Task: Set up basic CI/CD pipeline (Optional)",
    "body": "Part of Epic: Project Foundation & Core Setup\n\nSet up a basic CI/CD pipeline for automated testing/deployment.",
    "labels": ["task", "sprint-0", "devops", "ci-cd", "optional", "project-foundation"]
  },
  {
    "title": "Epic: User Onboarding Experience",
    "body": "Goal: Create a dynamic and engaging onboarding process to capture initial user profile data.",
    "labels": ["epic", "onboarding"]
  },
  {
    "title": "US005: Implement wizard-style onboarding UI",
    "body": "Part of Epic: User Onboarding Experience\n\nAs a new user, I want to be guided through an onboarding quiz one question at a time in a wizard-style interface, so that I don't feel overwhelmed by a long form.",
    "labels": ["user-story", "sprint-1", "ui", "frontend", "onboarding"]
  },
  {
    "title": "US006: Add progress indicator to onboarding quiz",
    "body": "Part of Epic: User Onboarding Experience\n\nAs a new user progressing through the quiz, I want to see a visual indicator of my progress, so that I know how much is left.",
    "labels": ["user-story", "sprint-1", "ui", "frontend", "onboarding"]
  },
  {
    "title": "US007: Implement adaptive questioning logic in onboarding",
    "body": "Part of Epic: User Onboarding Experience\n\nAs a new user answering quiz questions, I want subsequent questions to adapt based on my previous answers, so that the quiz feels relevant and builds a deep profile efficiently.",
    "labels": ["user-story", "sprint-1", "backend", "logic", "onboarding"]
  },
  {
    "title": "US008: Provide immediate feedback during onboarding quiz",
    "body": "Part of Epic: User Onboarding Experience\n\nAs a new user during the quiz, I want to occasionally receive immediate, relevant feedback or insights based on my answers (e.g., acknowledging poor sleep), so that I feel engaged and see value early on.",
    "labels": ["user-story", "sprint-1", "backend", "frontend", "engagement", "onboarding"]
  },
  {
    "title": "Task005: Implement backend logic to store onboarding data",
    "body": "Part of Epic: User Onboarding Experience\n\nImplement backend logic to store quiz responses progressively into the `UserProfile.profile_data` JSON structure.",
    "labels": ["task", "sprint-1", "backend", "database", "onboarding"]
  },
  {
    "title": "Task006: Implement logic to update User.onboarding_status",
    "body": "Part of Epic: User Onboarding Experience\n\nImplement logic to update the `User.onboarding_status` as the user progresses and completes the quiz.",
    "labels": ["task", "sprint-1", "backend", "database", "onboarding"]
  },
  {
    "title": "Epic: Personalized Plan Generation Engine",
    "body": "Goal: Enable the AI to generate personalized Exercise, Nutrition, and Sleep plans based on user profiles.",
    "labels": ["epic", "plan-generation", "ai"]
  },
  {
    "title": "Task007: Build core AI interaction service/module",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nBuild and test the core backend service/module for interacting with the selected AI provider's API, including secure API key management.",
    "labels": ["task", "sprint-2", "backend", "ai", "integration", "plan-generation"]
  },
  {
    "title": "Task008: Develop and refine AI prompts for Exercise plans",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nDevelop and refine prompts for the AI to generate a personalized Exercise plan based on `UserProfile` data.",
    "labels": ["task", "sprint-2", "ai", "prompt-engineering", "plan-generation", "exercise"]
  },
  {
    "title": "US009: Generate personalized Exercise plan",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nAs a user who has completed onboarding, I want the system to generate a personalized Exercise plan tailored to my profile, so that I have actionable workout guidance.",
    "labels": ["user-story", "sprint-2", "backend", "ai", "plan-generation", "exercise"]
  },
  {
    "title": "Task009: Implement backend endpoint for Exercise plan generation",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nImplement the backend endpoint and logic to process Exercise plan generation requests, handle AI responses (including errors/timeouts), and store results in the `Plan` table (`plan_type='exercise'`).",
    "labels": ["task", "sprint-2", "backend", "ai", "database", "plan-generation", "exercise"]
  },
  {
    "title": "US010: Display generated Exercise plan",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nAs a user, I want to be able to view my generated Exercise plan within the application, so that I know what workouts are recommended.",
    "labels": ["user-story", "sprint-2", "frontend", "ui", "plan-generation", "exercise"]
  },
   {
    "title": "Task010: Develop and refine AI prompts for Nutrition plans",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nDevelop and refine prompts for the AI to generate personalized Nutrition plans.",
    "labels": ["task", "sprint-3", "ai", "prompt-engineering", "plan-generation", "nutrition"]
  },
  {
    "title": "US011: Generate personalized Nutrition plan",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nAs a user who has completed onboarding, I want the system to generate a personalized Nutrition plan, so that I have guidance on what to eat.",
    "labels": ["user-story", "sprint-3", "backend", "ai", "plan-generation", "nutrition"]
  },
   {
    "title": "Task011: Implement backend logic for Nutrition plan generation",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nImplement backend logic for Nutrition plan generation and storage (`plan_type='nutrition'`).",
    "labels": ["task", "sprint-3", "backend", "ai", "database", "plan-generation", "nutrition"]
  },
  {
    "title": "US012: Display generated Nutrition plan",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nAs a user, I want to view my generated Nutrition plan within the app.",
    "labels": ["user-story", "sprint-3", "frontend", "ui", "plan-generation", "nutrition"]
  },
   {
    "title": "Task012: Develop and refine AI prompts for Sleep plans",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nDevelop and refine prompts for the AI to generate personalized Sleep plans.",
    "labels": ["task", "sprint-3", "ai", "prompt-engineering", "plan-generation", "sleep"]
  },
  {
    "title": "US013: Generate personalized Sleep plan",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nAs a user who has completed onboarding, I want the system to generate a personalized Sleep plan, so that I have recommendations for improving my sleep.",
    "labels": ["user-story", "sprint-3", "backend", "ai", "plan-generation", "sleep"]
  },
   {
    "title": "Task013: Implement backend logic for Sleep plan generation",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nImplement backend logic for Sleep plan generation and storage (`plan_type='sleep'`).",
    "labels": ["task", "sprint-3", "backend", "ai", "database", "plan-generation", "sleep"]
  },
  {
    "title": "US014: Display generated Sleep plan",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nAs a user, I want to view my generated Sleep plan within the app.",
    "labels": ["user-story", "sprint-3", "frontend", "ui", "plan-generation", "sleep"]
  },
  {
    "title": "Task014: Implement Plan database table schema",
    "body": "Part of Epic: Personalized Plan Generation Engine\n\nImplement the `Plan` database table schema.",
    "labels": ["task", "sprint-2", "database", "backend", "plan-generation"]
  },
  {
    "title": "Epic: Task Management & Tracking",
    "body": "Goal: Translate plans into daily tasks and allow users to track their completion.",
    "labels": ["epic", "tasks"]
  },
  {
    "title": "US015: Automatically generate daily tasks from plans",
    "body": "Part of Epic: Task Management & Tracking\n\nAs a user with generated plans, I want the system to automatically break down my Exercise, Nutrition, and Sleep plans into specific, actionable daily tasks, so that I have a clear daily checklist.",
    "labels": ["user-story", "sprint-3", "backend", "ai", "logic", "tasks", "plan-generation"]
  },
  {
    "title": "Task015: Implement task generation logic (AI or rule-based)",
    "body": "Part of Epic: Task Management & Tracking\n\nImplement logic (AI-based or rule-based) to parse `Plan.plan_content` and create corresponding entries in the `Task` table with appropriate descriptions and due dates.",
    "labels": ["task", "sprint-3", "backend", "ai", "database", "tasks"]
  },
  {
    "title": "US016: Implement daily task dashboard view",
    "body": "Part of Epic: Task Management & Tracking\n\nAs a user, I want a dashboard view where I can easily see my assigned tasks for the current day, so that I know what I need to accomplish.",
    "labels": ["user-story", "sprint-3", "frontend", "ui", "dashboard", "tasks"]
  },
  {
    "title": "US017: Allow users to mark tasks as completed",
    "body": "Part of Epic: Task Management & Tracking\n\nAs a user viewing my daily tasks, I want to be able to mark a task as 'completed', so that the system records my progress and adherence.",
    "labels": ["user-story", "sprint-3", "frontend", "backend", "tasks"]
  },
  {
    "title": "Task016: Implement backend logic for task status updates",
    "body": "Part of Epic: Task Management & Tracking\n\nImplement backend logic to update `Task.status` and `Task.completed_at` when a user marks a task complete.",
    "labels": ["task", "sprint-3", "backend", "database", "tasks"]
  },
   {
    "title": "Task017: Implement Task database table schema",
    "body": "Part of Epic: Task Management & Tracking\n\nImplement the `Task` database table schema.",
    "labels": ["task", "sprint-3", "database", "backend", "tasks"]
  },
  {
    "title": "Epic: AI Coaching & Progressive Profiling",
    "body": "Goal: Provide an interactive AI coach and continuously refine the user profile through conversation.",
    "labels": ["epic", "chatbot", "ai", "progressive-profiling"]
  },
  {
    "title": "US018: Implement in-app AI chatbot interface",
    "body": "Part of Epic: AI Coaching & Progressive Profiling\n\nAs a user, I want an in-app chat interface where I can ask questions or provide updates to an AI coach, so that I can get support and clarification.",
    "labels": ["user-story", "sprint-4", "frontend", "ui", "chatbot"]
  },
  {
    "title": "Task018: Implement backend chat endpoint and AI integration",
    "body": "Part of Epic: AI Coaching & Progressive Profiling\n\nImplement the backend endpoint to receive user chat messages and interact with the AI API to generate relevant responses.",
    "labels": ["task", "sprint-4", "backend", "ai", "integration", "chatbot"]
  },
  {
    "title": "Task019: Implement chat history storage",
    "body": "Part of Epic: AI Coaching & Progressive Profiling\n\nImplement logic to store the chat conversation history (user messages and AI responses) in the `ChatMessage` table.",
    "labels": ["task", "sprint-4", "backend", "database", "chatbot"]
  },
  {
    "title": "US019: Implement progressive profiling via chatbot questions",
    "body": "Part of Epic: AI Coaching & Progressive Profiling\n\nAs a user interacting with the chatbot, I want it to occasionally ask me targeted questions based on my recent activity or profile data, so that my profile can be refined over time without me needing to fill out more forms.",
    "labels": ["user-story", "sprint-5", "backend", "ai", "logic", "chatbot", "progressive-profiling"]
  },
  {
    "title": "Task020: Implement triggers for progressive profiling questions",
    "body": "Part of Epic: AI Coaching & Progressive Profiling\n\nImplement backend logic to identify triggers (e.g., time-based, usage-based) for initiating progressive profiling questions via the chatbot.",
    "labels": ["task", "sprint-5", "backend", "logic", "progressive-profiling"]
  },
  {
    "title": "Task021: Flag AI profiling questions in ChatMessage table",
    "body": "Part of Epic: AI Coaching & Progressive Profiling\n\nFlag AI-initiated profiling questions in the `ChatMessage` table (`is_profiling_prompt`).",
    "labels": ["task", "sprint-5", "backend", "database", "progressive-profiling"]
  },
  {
    "title": "Task022: Implement logic to update UserProfile from chat responses",
    "body": "Part of Epic: AI Coaching & Progressive Profiling\n\nImplement logic to process user responses to profiling questions and update the relevant sections of the `UserProfile.profile_data` JSON.",
    "labels": ["task", "sprint-5", "backend", "database", "progressive-profiling"]
  },
  {
    "title": "Task023: Implement ChatMessage database table schema",
    "body": "Part of Epic: AI Coaching & Progressive Profiling\n\nImplement the `ChatMessage` database table schema.",
    "labels": ["task", "sprint-4", "database", "backend", "chatbot"]
  },
  {
    "title": "Epic: Progress Tracking & Analytics",
    "body": "Goal: Allow users to see basic progress and implement foundational analytics tracking.",
    "labels": ["epic", "progress-tracking", "analytics"]
  },
  {
    "title": "US020: Display basic visual progress indicators",
    "body": "Part of Epic: Progress Tracking & Analytics\n\nAs a user, I want to see simple visual indicators of my progress on my dashboard (e.g., task completion streaks, number of goals achieved), so that I feel motivated and understand my consistency.",
    "labels": ["user-story", "sprint-5", "frontend", "ui", "dashboard", "progress-tracking"]
  },
  {
    "title": "Task024: Select and configure analytics platform/library",
    "body": "Part of Epic: Progress Tracking & Analytics\n\nChoose and configure a suitable analytics platform/library or setup custom logging.",
    "labels": ["task", "sprint-5", "analytics", "setup", "research"]
  },
  {
    "title": "Task025: Implement AnalyticsEvent database table schema (if needed)",
    "body": "Part of Epic: Progress Tracking & Analytics\n\nImplement the `AnalyticsEvent` database table schema (if using custom logging).",
    "labels": ["task", "sprint-5", "database", "backend", "analytics"]
  },
  {
    "title": "Task026: Implement tracking for key Analytics Events",
    "body": "Part of Epic: Progress Tracking & Analytics\n\nImplement frontend and backend tracking logic to log the key `AnalyticsEvent`s defined in the project brief (e.g., `onboarding_completion`, `plan_view_usage`, `chat_engagement`, `recommendation_habit_followed`, etc.). Ensure relevant properties are included.",
    "labels": ["task", "sprint-6", "backend", "frontend", "analytics", "tracking"]
  },
  {
    "title": "Epic: MVP Polish & Deployment Preparation",
    "body": "Goal: Refine the MVP based on internal testing, fix bugs, and prepare for user testing deployment.",
    "labels": ["epic", "polish", "deployment", "testing"]
  },
  {
    "title": "Task027: Conduct comprehensive internal testing",
    "body": "Part of Epic: MVP Polish & Deployment Preparation\n\nConduct comprehensive internal testing (functional, usability, cross-browser checks if applicable).",
    "labels": ["task", "sprint-6", "testing", "qa"]
  },
  {
    "title": "Task028: Fix bugs identified during internal testing",
    "body": "Part of Epic: MVP Polish & Deployment Preparation\n\nAddress and fix bugs identified during internal testing.",
    "labels": ["task", "sprint-6", "bugfix", "qa"]
  },
  {
    "title": "Task029: Perform UI/UX polish based on feedback",
    "body": "Part of Epic: MVP Polish & Deployment Preparation\n\nPerform UI/UX polish based on internal feedback – improve clarity, consistency, and ease of use.",
    "labels": ["task", "sprint-6", "ui", "ux", "frontend", "polish"]
  },
  {
    "title": "Task030: Prepare application for deployment to testing environment",
    "body": "Part of Epic: MVP Polish & Deployment Preparation\n\nPrepare necessary configurations and scripts for deploying the application to a staging/testing environment accessible to test users.",
    "labels": ["task", "sprint-6", "deployment", "devops"]
  },
  {
    "title": "Task031: Finalize user testing plan and materials",
    "body": "Part of Epic: MVP Polish & Deployment Preparation\n\nFinalize the user testing plan, recruitment strategy, onboarding materials for test users, and feedback collection mechanisms.",
    "labels": ["task", "sprint-6", "documentation", "user-testing", "planning"]
  }
] 