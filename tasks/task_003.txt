# Task ID: 3
# Title: Develop Onboarding Quiz Wizard
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Create the multi-step onboarding questionnaire to gather initial user data for personalization.
# Details:
1. Design the wizard UI with step indicators and navigation controls
2. Create ~7 core questions mixing MCQ and open-ended formats
3. Implement state management for the wizard using Zustand or Context API
4. Set up Supabase Function for processing onboarding answers
5. Integrate with external LLM API (Claude/GPT/Gemini) for potential dynamic follow-up questions
6. Store collected data in the user's profile
7. Implement progress saving to allow users to continue later
8. Add validation for required fields

# Test Strategy:
Test the wizard flow with various input combinations. Verify data is correctly saved to the profile. Test the dynamic follow-up question functionality with different initial responses.

# Subtasks:
## 1. Design Wizard UI Framework [done]
### Dependencies: None
### Description: Create the overall UI structure for the onboarding wizard that breaks down the complex process into sequential steps
### Details:
Design a modal window with clear navigation controls, progress indicators, and a consistent layout that guides users through the onboarding process. Include wireframes and mockups for different screen sizes.
<info added on 2025-05-14T08:13:26.774Z>
Design a modal window with clear navigation controls, progress indicators, and a consistent layout that guides users through the onboarding process. Include wireframes and mockups for different screen sizes.

The UI framework will consist of three main components:

1. OnboardingWizard.tsx - Main container component that will:
   - Render as a modal overlay
   - Manage step navigation state (currentStep)
   - Handle wizard open/close functionality
   - Provide navigation buttons (Previous, Next, Finish)
   - Accept props: isOpen, onClose, totalSteps

2. WizardStep.tsx - Reusable component for individual steps that will:
   - Display step title
   - Render step content via children props
   - Accept props: title, children

3. WizardProgress.tsx - Visual progress indicator that will:
   - Show user's position in the wizard flow
   - Highlight completed and current steps
   - Accept props: currentStep, totalSteps

All components will be created in a new directory structure: src/components/onboarding/

The design will use Tailwind CSS for styling with focus on creating a clean, intuitive, and responsive modal interface. Navigation controls will be contextually aware (Previous button disabled on first step, Next changing to Finish on last step).

This framework will serve as the foundation for the Question Creation System in subtask 3.2.
</info added on 2025-05-14T08:13:26.774Z>
<info added on 2025-05-14T08:14:29.751Z>
Initial implementation of the UI framework components has been completed. The directory structure src/components/onboarding/ has been created with three main component files:

1. OnboardingWizard.tsx - Implemented with basic modal structure and navigation logic. Currently contains placeholders for the progress indicator and step content that will be integrated in the next phase.

2. WizardStep.tsx - Basic implementation completed with the ability to render a step's title and children content through props.

3. WizardProgress.tsx - Created with visual elements (circles and connecting lines) to represent the wizard's progress, with states for current, completed, and pending steps.

The next phase of development will focus on:
- Applying Tailwind CSS styling to enhance the visual appeal and usability
- Integrating the WizardProgress and WizardStep components into the main OnboardingWizard component
- Creating a test implementation to validate the wizard flow functionality
- Testing the modal's opening/closing behavior and step navigation

This framework will provide the foundation for the Question Creation System in subtask 3.2, ensuring a consistent user experience throughout the onboarding process.
</info added on 2025-05-14T08:14:29.751Z>
<info added on 2025-05-14T10:08:36.747Z>
The UI framework has been successfully tested and validated through a temporary test page. The three main components (OnboardingWizard.tsx, WizardStep.tsx, and WizardProgress.tsx) are functioning correctly and are properly integrated.

Key validation points:
1. Modal functionality works as expected with proper open/close behavior
2. Navigation controls (Previous/Next/Finish) function correctly with appropriate state handling
3. Progress indicator accurately displays the user's position in the wizard flow
4. Step content rendering is working properly with titles and content displaying as intended
5. Basic Tailwind CSS styling is in place and the UI is responsive to window resizing

The test implementation (OnboardingTestPage.tsx) accessible via the /onboarding-test route confirmed that all core functionality is working without console errors. The framework is now ready to serve as the foundation for the Question Creation System in subtask 3.2.

One minor observation was noted regarding the test page layout where the wizard initially opens on top of the open/close button, but this doesn't affect the wizard functionality itself.
</info added on 2025-05-14T10:08:36.747Z>

## 2. Develop Question Creation System [pending]
### Dependencies: 3.1
### Description: Build a system to create, manage and organize onboarding quiz questions
### Details:
Create interfaces for defining question types (multiple choice, text input, etc.), validation rules, branching logic, and question dependencies. Include tools for question previewing and testing.
<info added on 2025-05-15T05:48:57.430Z>
Create interfaces for defining question types (multiple choice, text input, etc.), validation rules, branching logic, and question dependencies. Include tools for question previewing and testing.

Implementation Plan:

1. Define TypeScript interfaces in src/lib/types/onboarding.ts:
   - OnboardingQuestion (union type)
   - Specific question types: MCQ, Text, Select, MultipleSelect, Slider
   - Supporting types: QuestionOption, ValidationRule, BranchCondition, BranchTarget, OnboardingQuiz

2. Create sample questions configuration in src/config/onboardingQuestions.ts with a default OnboardingQuiz object

3. Develop question rendering components in src/components/onboarding/questions/:
   - QuestionDisplay.tsx: Main component for dynamic question rendering
   - Type-specific components: MCQQuestionDisplay.tsx, TextQuestionDisplay.tsx, SelectQuestionDisplay.tsx, MultipleSelectQuestionDisplay.tsx, SliderQuestionDisplay.tsx

4. Update OnboardingWizard.tsx:
   - Modify props to accept questions array instead of steps
   - Implement state management for tracking current question and user answers
   - Create answer handling with validation logic
   - Implement branching logic to determine next question based on answers
   - Update rendering to use QuestionDisplay component

5. Create validation utility in src/lib/utils/validation.ts:
   - Implement validateAnswer function to check answers against validation rules
   - Support various validation types (required, minLength, etc.)

6. Update OnboardingTestPage.tsx for testing the new question system with sample questions

7. Test all question types, validation rules, and branching logic functionality
</info added on 2025-05-15T05:48:57.430Z>

## 3. Implement State Management [pending]
### Dependencies: 3.1, 3.2
### Description: Develop a robust state management system to handle user progress and responses
### Details:
Create a state management architecture that tracks user inputs, handles conditional logic between questions, manages validation states, and preserves the current session state. Include error handling and recovery mechanisms.

## 4. Build Backend Integration Layer [pending]
### Dependencies: 3.3
### Description: Create APIs and services to connect the wizard frontend with backend systems
### Details:
Develop RESTful APIs for data exchange between the wizard and backend services. Include authentication, error handling, and logging capabilities to ensure reliable communication.

## 5. Integrate LLM API [pending]
### Dependencies: 3.3, 3.4
### Description: Connect the wizard with Language Learning Model APIs for intelligent response processing
### Details:
Implement integration with LLM APIs to analyze user responses, provide personalized feedback, and adapt question flow based on user inputs. Include fallback mechanisms for API failures.

## 6. Design Data Storage Architecture [pending]
### Dependencies: 3.4
### Description: Create a database schema and storage system for user responses and wizard configuration
### Details:
Design database models for storing question configurations, user responses, and session data. Include considerations for data security, performance optimization, and scalability.

## 7. Implement Progress Saving Mechanism [pending]
### Dependencies: 3.3, 3.6
### Description: Create functionality to save and restore user progress through the wizard
### Details:
Develop automatic and manual save points throughout the wizard flow. Implement session recovery, progress indicators, and the ability to resume from where users left off.

## 8. Build Validation and Completion System [pending]
### Dependencies: 3.2, 3.3, 3.6, 3.7
### Description: Create comprehensive validation rules and completion handling for the wizard
### Details:
Implement input validation for all question types, overall wizard completion validation, and success/failure handling. Include user feedback mechanisms and next steps guidance upon completion.

